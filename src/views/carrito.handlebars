<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.tailwindcss.com"></script> 
   <title>Mi Carrito</title>
</head>
<body class="bg-gray-100 font-sans text-gray-700 relative">

  <!-- Botón de Cerrar sesión en la parte superior derecha -->
  <form id="logoutForm" action="/api/sessions/logout" method="post" class="absolute top-4 right-4">
    <button  type="submit" class="bg-red-500 text-white py-2 px-4 rounded-lg hover:bg-red-600 transition duration-200">
      Cerrar sesión
    </button>
  </form>

  <h3 class="text-2xl font-bold text-center py-4">Mi Carrito de Compras</h3>

  {{#if cart.products.length}}
    <ul class="space-y-6 px-4 flex justify-center">

      {{#each cart.products}}
        <li class="bg-white border border-gray-300 rounded-lg shadow-lg p-6 w-full max-w-md">

          <!-- Acceder al nombre del producto -->
          <h3 class="text-xl font-semibold text-center text-blue-500">{{this.title}}</h3>

          <!-- Acceder al precio del producto -->
          <p class="text-center text-lg text-green-700 mb-4">Precio: ${{this.price}}</p>

          <!-- Mostrar la cantidad del producto y permitir su actualización -->
          <div class="flex justify-center items-center mb-4">
            <p class="mr-2">Cantidad:</p>
            <input type="number" id="quantity-{{this.productId._id}}" value="{{this.quantity}}" min="1" required class="p-2 border border-gray-300 rounded-md w-20">
            <button onclick="updateQuantity('{{this.productId._id}}')" class="ml-4 bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 transition duration-200">
              Actualizar Cantidad
            </button>
          </div>

          <!-- Mostrar el total del producto -->
          <p class="text-center text-lg font-semibold mb-4">Total: ${{this.totalProductPrice}}</p>

                <!-- Formulario para eliminar el producto -->
                <form action="/cart/remove/{{this.productId._id}}" method="POST" class="delete-form text-center">
            <!-- Campo oculto para simular la petición DELETE -->
            <input type="hidden" name="_method" value="DELETE">
            <!-- Botón de eliminar con los estilos no modificados -->
            <button type="submit" class="bg-red-500 text-white py-2 px-4 rounded-lg hover:bg-red-600 transition duration-200">
              Eliminar
            </button>
          </form> 
                   
            </li>
        {{/each}}
    </ul>

    <!-- Mostrar el total del carrito -->
     <h3 class="text-2xl font-bold text-center py-6">Total del Carrito: ${{cart.totalAmount}}</h3>

  {{else}}
    <p class="text-center text-lg text-red-500 mt-4">Tu carrito está vacío.</p>
  {{/if}}

  <!-- Botón para seguir comprando -->
  <div class="text-center py-4">
    <button class="bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 transition duration-200">
      <a href="/" class="text-white">Seguir Comprando</a>
    </button>
  </div>

  <!-- Formulario para proceder a la compra -->
  <form action="/api/checkout" method="POST" class="text-center flex flex-col space-y-4">
    <input type="text" name="purchaser" placeholder="Ingresa tu nombre o correo para finalizar" required class="p-3 border border-gray-300 rounded-md w-80 mx-auto">
    <input type="number" name="amount" value="0" id="amount" hidden> <!-- El valor será calculado dinámicamente -->
    <button type="submit" class="w-full bg-green-500 text-white py-2 px-4 rounded-lg hover:bg-green-600 transition duration-200 max-w-md mx-auto">
      Proceder a la compra
    </button>
</form>






<script>
    // Suponiendo que tienes un carrito de productos con precios
    let cart = [
        { price: 100, quantity: 2 },  // Ejemplo de producto con precio y cantidad
        { price: 50, quantity: 1 }
    ];

    // Calcular el total del carrito
    let totalAmount = 0;
    cart.forEach(product => {
        totalAmount += product.price * product.quantity;
    });

    // Establecer el valor del campo amount en el formulario
    document.getElementById('amount').value = totalAmount;
</script>




  <script>
    // Función para actualizar la cantidad de un producto en el carrito
    function updateQuantity(productId) {
        const quantity = document.getElementById(`quantity-${productId}`).value;

        fetch(`/cart/update-quantity/${productId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('token')}` // Asegúrate de que el token JWT esté aquí
            },
            body: JSON.stringify({ quantity }) // Enviar la nueva cantidad
        })
        .then(response => response.json())
        .then(data => {
            if (data.cart) {
                // Actualizar el carrito sin recargar la página
                location.reload(); // Recargar la página con el carrito actualizado
            }
        })
        .catch(error => {
            console.error('Error al actualizar la cantidad:', error);
        });
    }

    // JavaScript para manejar el método DELETE con POST
    document.querySelectorAll('.delete-form').forEach(form => {
        form.addEventListener('submit', function(event) {
            event.preventDefault(); // Prevenir el envío normal del formulario

            const productId = form.action.split('/').pop(); // Obtener el productId de la URL

            fetch(`/cart/remove/${productId}`, {
                method: 'DELETE', // Usamos DELETE directamente en el fetch
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${localStorage.getItem('token')}` // Asegúrate de que el token JWT esté aquí
                },
            })
            .then(response => response.json())
            .then(data => {
                if (data.cart) {
                    // Recargar la página o actualizar el carrito sin recargar la página
                    location.reload(); // Recarga la página con el carrito actualizado
                }
            })
            .catch(error => {
                console.error('Error al eliminar el producto:', error);
            });
        });
    });
  </script>
</body>
</html>



