<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mi Carrito</title>
</head>
<body>
  <h3>Mi Carrito de Compras</h3>

  {{#if cart.products.length}}
    <ul>
        {{#each cart.products}}
            <li>
                <!-- Acceder al nombre del producto -->
                <h3>{{this.title}}</h3>

                <!-- Acceder al precio del producto -->
                <p>Precio: ${{this.price}}</p>

                <!-- Mostrar la cantidad del producto y permitir su actualización -->
                <p>Cantidad: 
                    <input type="number" id="quantity-{{this.productId._id}}" value="{{this.quantity}}" min="1" required>
                    <button onclick="updateQuantity('{{this.productId._id}}')">Actualizar Cantidad</button>
                </p>

                <!-- Mostrar el total del producto -->
                <p>Total: ${{this.totalProductPrice}}</p>

                <!-- Formulario para eliminar el producto -->
                <form action="/cart/remove/{{this.productId._id}}" method="POST" class="delete-form">
                    <input type="hidden" name="_method" value="DELETE">
                    <button type="submit">Eliminar</button>
                </form>
            </li>
        {{/each}}
    </ul>

    <!-- Mostrar el total del carrito -->
    <h3>Total del Carrito: ${{cart.totalAmount}}</h3>

  {{else}}
    <p>Tu carrito está vacío.</p>
  {{/if}}

  <button><a href="/">Proceder a la compra</a></button>

  <script>
    // Función para actualizar la cantidad de un producto en el carrito
    function updateQuantity(productId) {
        const quantity = document.getElementById(`quantity-${productId}`).value;

        fetch(`/cart/update-quantity/${productId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('token')}` // Asegúrate de que el token JWT esté aquí
            },
            body: JSON.stringify({ quantity }) // Enviar la nueva cantidad
        })
        .then(response => response.json())
        .then(data => {
            if (data.cart) {
                // Actualizar el carrito sin recargar la página
                location.reload(); // Recargar la página con el carrito actualizado
            }
        })
        .catch(error => {
            console.error('Error al actualizar la cantidad:', error);
        });
    }

    // JavaScript para manejar el método DELETE con POST
    document.querySelectorAll('.delete-form').forEach(form => {
        form.addEventListener('submit', function(event) {
            event.preventDefault(); // Prevenir el envío normal del formulario

            const productId = form.action.split('/').pop(); // Obtener el productId de la URL

            fetch(`/cart/remove/${productId}`, {
                method: 'DELETE', // Usamos DELETE directamente en el fetch
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${localStorage.getItem('token')}` // Asegúrate de que el token JWT esté aquí
                },
            })
            .then(response => response.json())
            .then(data => {
                if (data.cart) {
                    // Recargar la página o actualizar el carrito sin recargar la página
                    location.reload(); // Recarga la página con el carrito actualizado
                }
            })
            .catch(error => {
                console.error('Error al eliminar el producto:', error);
            });
        });
    });
  </script>
</body>
</html>



